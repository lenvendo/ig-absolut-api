// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package health

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3a9ed663DecodeApiPkgHealth(in *jlexer.Lexer, out *VersionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BuildTime":
			out.BuildTime = string(in.String())
		case "Commit":
			out.Commit = string(in.String())
		case "Version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3a9ed663EncodeApiPkgHealth(out *jwriter.Writer, in VersionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BuildTime != "" {
		const prefix string = ",\"BuildTime\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.BuildTime))
	}
	if in.Commit != "" {
		const prefix string = ",\"Commit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Commit))
	}
	if in.Version != "" {
		const prefix string = ",\"Version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VersionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3a9ed663EncodeApiPkgHealth(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VersionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3a9ed663EncodeApiPkgHealth(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VersionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3a9ed663DecodeApiPkgHealth(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VersionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3a9ed663DecodeApiPkgHealth(l, v)
}
func easyjson3a9ed663DecodeApiPkgHealth1(in *jlexer.Lexer, out *VersionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3a9ed663EncodeApiPkgHealth1(out *jwriter.Writer, in VersionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VersionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3a9ed663EncodeApiPkgHealth1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VersionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3a9ed663EncodeApiPkgHealth1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VersionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3a9ed663DecodeApiPkgHealth1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VersionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3a9ed663DecodeApiPkgHealth1(l, v)
}
func easyjson3a9ed663DecodeApiPkgHealth2(in *jlexer.Lexer, out *ReadinessResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3a9ed663EncodeApiPkgHealth2(out *jwriter.Writer, in ReadinessResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReadinessResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3a9ed663EncodeApiPkgHealth2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReadinessResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3a9ed663EncodeApiPkgHealth2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReadinessResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3a9ed663DecodeApiPkgHealth2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReadinessResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3a9ed663DecodeApiPkgHealth2(l, v)
}
func easyjson3a9ed663DecodeApiPkgHealth3(in *jlexer.Lexer, out *ReadinessRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3a9ed663EncodeApiPkgHealth3(out *jwriter.Writer, in ReadinessRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReadinessRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3a9ed663EncodeApiPkgHealth3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReadinessRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3a9ed663EncodeApiPkgHealth3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReadinessRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3a9ed663DecodeApiPkgHealth3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReadinessRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3a9ed663DecodeApiPkgHealth3(l, v)
}
func easyjson3a9ed663DecodeApiPkgHealth4(in *jlexer.Lexer, out *LivenessResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3a9ed663EncodeApiPkgHealth4(out *jwriter.Writer, in LivenessResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LivenessResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3a9ed663EncodeApiPkgHealth4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LivenessResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3a9ed663EncodeApiPkgHealth4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LivenessResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3a9ed663DecodeApiPkgHealth4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LivenessResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3a9ed663DecodeApiPkgHealth4(l, v)
}
func easyjson3a9ed663DecodeApiPkgHealth5(in *jlexer.Lexer, out *LivenessRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3a9ed663EncodeApiPkgHealth5(out *jwriter.Writer, in LivenessRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LivenessRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3a9ed663EncodeApiPkgHealth5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LivenessRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3a9ed663EncodeApiPkgHealth5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LivenessRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3a9ed663DecodeApiPkgHealth5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LivenessRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3a9ed663DecodeApiPkgHealth5(l, v)
}
