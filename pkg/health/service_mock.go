// Code generated by MockGen. DO NOT EDIT.

// Package health is a generated GoMock package.
package health

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Liveness mocks base method
func (m *MockService) Liveness(arg0 context.Context, arg1 *LivenessRequest) (*LivenessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Liveness", arg0, arg1)
	ret0, _ := ret[0].(*LivenessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Liveness indicates an expected call of Liveness
func (mr *MockServiceMockRecorder) Liveness(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockService)(nil).Liveness), arg0, arg1)
}

// Readiness mocks base method
func (m *MockService) Readiness(arg0 context.Context, arg1 *ReadinessRequest) (*ReadinessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readiness", arg0, arg1)
	ret0, _ := ret[0].(*ReadinessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readiness indicates an expected call of Readiness
func (mr *MockServiceMockRecorder) Readiness(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockService)(nil).Readiness), arg0, arg1)
}

// Version mocks base method
func (m *MockService) Version(arg0 context.Context, arg1 *VersionRequest) (*VersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0, arg1)
	ret0, _ := ret[0].(*VersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version
func (mr *MockServiceMockRecorder) Version(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockService)(nil).Version), arg0, arg1)
}
